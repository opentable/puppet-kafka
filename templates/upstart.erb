
description "<%= @service_name %>"

start on runlevel [2345]
stop on [!12345]

respawn
respawn limit 5 60

umask 007
limit nofile 65536 65536
limit stack 10485760 10485760
limit core unlimited unlimited
kill timeout 300

setuid kafka
setgid kafka

script

<%- case @service_name
  when 'kafka' -%>

DAEMON="/opt/kafka/bin/kafka-server-start.sh"
DAEMON_OPTS="/opt/kafka/config/server.properties"

export KAFKA_JMX_OPTS="<%= @jmx_opts %>"
export KAFKA_LOG4J_OPTS="<%= @log4j_opts %>"
export KAFKA_HEAP_OPTS="<%= @heap_opts %>"

export KAFKA_OPTS="<%= @opts %>"

<%- when 'kafka-consumer' -%>

DAEMON="/opt/kafka/bin/kafka-console-consumer.sh"
DAEMON_OPTS="<% @consumer_service_config.sort.each do |k,v| -%><% unless v.to_s.strip.empty? -%>--<%= k -%>=<%= v.is_a?(Array) ? v.join(',') : v %> <% end -%><% end -%>"

export KAFKA_JMX_OPTS="<%= @consumer_jmx_opts %>"
export KAFKA_LOG4J_OPTS="<%= @consumer_log4j_opts %>"

<%- when 'kafka-mirror' -%>

DAEMON="/opt/kafka/bin/kafka-run-class.sh"
DAEMON_OPTS="kafka.tools.MirrorMaker --consumer.config <%= @consumer_config -%> --num.streams <%= @num_streams -%> --producer.config <%= @producer_config -%><%- if (scope.function_versioncmp([scope.lookupvar('kafka::version'), '0.9.0.0']) < 0) -%> --num.producers <%= @num_producers -%><%- end -%><%- if !@whitelist.eql?('') -%> --whitelist='<%= @whitelist -%>'<%- end %><%- if !@blacklist.eql?('') -%> --blacklist='<%= @blacklist -%>'<%- end -%> <%= @abort_on_send_failure_opt %>"

export KAFKA_HEAP_OPTS="-Xmx<%= @max_heap -%> -Xms<%= @max_heap -%>"
export KAFKA_JMX_OPTS="<%= @mirror_jmx_opts %>"
export KAFKA_LOG4J_OPTS="<%= @mirror_log4j_opts %>"

<%- when 'kafka-producer' -%>

DAEMON="/opt/kafka/bin/kafka-console-producer.sh"
DAEMON_OPTS="<% @producer_service_config.sort.each do |k,v| -%><% unless v.to_s.strip.empty? -%>--<%= k -%>=<%= v.is_a?(Array) ? v.join(',') : v %> <% end -%><% end -%> <%= @input -%>"

export KAFKA_JMX_OPTS="<%= @producer_jmx_opts %>"
export KAFKA_LOG4J_OPTS="<%= @producer_log4j_opts %>"
<%- end -%>

if [ -f /etc/default/kafka ]; then
    . /etc/default/kafka
fi

exec $DAEMON $DAEMON_OPTS

end script
